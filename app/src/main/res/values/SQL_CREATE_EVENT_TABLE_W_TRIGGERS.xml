<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE resources[
    <!ENTITY PROFILE_TABLE_NAME "profile">
    <!ENTITY PROFILE_USERNAME_COL "username">
    <!ENTITY EVENT_TABLE_NAME "events">
    <!ENTITY EVENT_REQ_USER_COL "req_user">
    <!ENTITY EVENT_REQ_USER_ID_COL "req_user_id">
    <!ENTITY EVENT_STIME_COL "S_time">
    <!ENTITY EVENT_STIME_EPOCH_COL "S_time_epoch">
    <!ENTITY EVENT_DUR_COL "duration_hrs">
    <!ENTITY EVENT_ETIME_COL "E_time">
    <!ENTITY EVENT_HALL_COL "hall">
    <!ENTITY EVENT_VENUE_COL "venue">
    <!ENTITY EVENT_AC_ID_COL "assigned_caterer_ID">
    <!ENTITY EVENT_APPROVAL_COL "approval_flag">
    <!ENTITY EVENT_ATT_COL "attendance">
    <!ENTITY EVENT_ALC_COL "alco_flag">
    <!ENTITY EVENT_FORM_COL "formal_flag">
    <!ENTITY EVENT_MT_COL "meal_type">
    <!ENTITY EVENT_PRC_COL "price">
    <!ENTITY EVENT_OCTYP_COL "occ_type">
    <!ENTITY EVENT_ENT_COL "ent_items">
    <!ENTITY EVENT_CS_ASSIGN_TABLE_NAME "events_cs_assign">
    <!ENTITY EVENT_ID_COL "event_row_id">
    <!ENTITY EVENT_CS_PROFILE_ID_COL "profile_row_id">
    <!ENTITY SQL_EVENT_TRIGGER_CALC_END_TIME_NAME "SQL_EVENT_TRIGGER_CALC_END_TIME">
    <!ENTITY SQL_EVENT_TRIGGER_EVENT_DELETION "SQL_EVENT_TRIGGER_EVENT_DELETION">

    <!ENTITY SQL_EVENT_TRIGGER_PROFILE_DELETION "SQL_EVENT_TRIGGER_PROFILE_DELETION">
    <!ENTITY SQL_EVENT_TRIGGER_USERNAME_CHANGE "SQL_EVENT_TRIGGER_USERNAME_CHANGE">
    <!ENTITY SQL_EVENT_TRIGGER_BECOMES_UNAPPROVED "SQL_EVENT_TRIGGER_BECOMES_UNAPPROVED">
    <!ENTITY SQL_EVENT_TRIGGER_BECOMES_APPROVED "SQL_EVENT_TRIGGER_BECOMES_APPROVED">

    ]>
<resources>
    <string name="PROFILE_TABLE_NAME">&PROFILE_TABLE_NAME;</string>
    <string name="EVENT_TABLE_NAME">&EVENT_TABLE_NAME;</string>
    <string name="EVENT_REQ_USER_COL">&EVENT_REQ_USER_COL;</string>
    <string name="EVENT_REQ_USER_ID_COL">&EVENT_REQ_USER_ID_COL;</string>
    <string name="EVENT_STIME_COL">&EVENT_STIME_COL;</string>
    <string name="EVENT_STIME_EPOCH_COL">&EVENT_STIME_EPOCH_COL;</string>
    <string name="EVENT_DUR_COL">&EVENT_DUR_COL;</string>
    <string name="EVENT_ETIME_COL">&EVENT_ETIME_COL;</string>
    <string name="EVENT_HALL_COL">&EVENT_HALL_COL;</string>
    <string name="EVENT_VENUE_COL">&EVENT_VENUE_COL;</string>
    <string name="EVENT_AC_ID_COL">&EVENT_AC_ID_COL;</string>
    <string name="EVENT_APPROVAL_COL">&EVENT_APPROVAL_COL;</string>
    <string name="EVENT_ATT_COL">&EVENT_ATT_COL;</string>
    <string name="EVENT_ALC_COL">&EVENT_ALC_COL;</string>
    <string name="EVENT_FORM_COL">&EVENT_FORM_COL;</string>
    <string name="EVENT_MT_COL">&EVENT_MT_COL;</string>
    <string name="EVENT_PRC_COL">&EVENT_PRC_COL;</string>
    <string name="EVENT_OCTYP_COL">&EVENT_OCTYP_COL;</string>
    <string name="EVENT_ENT_COL">&EVENT_ENT_COL;</string>
    <string name="EVENT_CS_ASSIGN_TABLE_NAME">&EVENT_CS_ASSIGN_TABLE_NAME;</string>
    <string name="EVENT_ID_COL">&EVENT_ID_COL;</string>
    <string name="EVENT_CS_PROFILE_ID_COL">&EVENT_CS_PROFILE_ID_COL;</string>
    <string name="SQL_CREATE_EVENT_TABLE_STRING"
    >CREATE TABLE &EVENT_TABLE_NAME;
    (
        _id INTEGER PRIMARY KEY,
        &EVENT_REQ_USER_COL; STRING,
        &EVENT_REQ_USER_ID_COL; INTEGER,
        &EVENT_STIME_COL; STRING,
        &EVENT_STIME_EPOCH_COL; REAL,
        &EVENT_DUR_COL; STRING,
        &EVENT_ETIME_COL; STRING,
        &EVENT_HALL_COL; STRING,
        &EVENT_VENUE_COL; STRING,
        &EVENT_AC_ID_COL; INTEGER,
        &EVENT_APPROVAL_COL; INTEGER,
        &EVENT_ATT_COL; INTEGER,
        &EVENT_ALC_COL; INTEGER,
        &EVENT_FORM_COL; INTEGER,
        &EVENT_MT_COL; STRING,
        &EVENT_PRC_COL; REAL,
        &EVENT_OCTYP_COL; STRING,
        &EVENT_ENT_COL; STRING,
        FOREIGN KEY (&EVENT_REQ_USER_ID_COL;) REFERENCES &PROFILE_TABLE_NAME;(_ID)
    );</string>
    <string name="SQL_CREATE_EVENT_CS_ASSIGN_TABLE_STRING"
        >CREATE TABLE &EVENT_CS_ASSIGN_TABLE_NAME;
    (
        _id INTEGER PRIMARY KEY,
        &EVENT_ID_COL; INTEGER,
        &EVENT_CS_PROFILE_ID_COL; INTEGER,
        FOREIGN KEY (&EVENT_ID_COL;) REFERENCES &EVENT_TABLE_NAME;(_ID),
        FOREIGN KEY (&EVENT_CS_PROFILE_ID_COL;) REFERENCES &PROFILE_TABLE_NAME;(_ID)
    );</string>
    <string name="SQL_EVENT_TRIGGER_CALC_END_TIME"
        >CREATE TRIGGER &SQL_EVENT_TRIGGER_CALC_END_TIME_NAME;
        AFTER INSERT ON &EVENT_TABLE_NAME;
        FOR EACH ROW
        BEGIN
            /*done to correct for when hour field is 24, rolls the date forward instead and sets hour to 0*/
            UPDATE &EVENT_TABLE_NAME;
            SET &EVENT_STIME_COL; = datetime(julianday("&EVENT_STIME_COL;"))
            WHERE &EVENT_ETIME_COL; IS NULL;

            /*julian day column is made to make sorting events by time easier later*/
            UPDATE &EVENT_TABLE_NAME;
            SET &EVENT_STIME_EPOCH_COL; = ROUND((CAST(julianday("&EVENT_STIME_COL;") AS NUMERIC)-2440587.5)*86400.0)
            WHERE &EVENT_ETIME_COL; IS NULL;

            UPDATE &EVENT_TABLE_NAME;
            SET &EVENT_ETIME_COL; = (SELECT &EVENT_STIME_COL; FROM &EVENT_TABLE_NAME; WHERE &EVENT_ETIME_COL; IS NULL)
            WHERE &EVENT_ETIME_COL; IS NULL;

            UPDATE &EVENT_TABLE_NAME;
            SET &EVENT_ETIME_COL; = datetime(&EVENT_ETIME_COL;,"'+' || &EVENT_DUR_COL; || ' hours'")
            WHERE &EVENT_ETIME_COL; =&EVENT_STIME_COL;;
        END;
    </string>
    <string name="SQL_EVENT_TRIGGER_EVENT_DELETION"
        >CREATE TRIGGER &SQL_EVENT_TRIGGER_EVENT_DELETION;
        BEFORE DELETE ON &EVENT_TABLE_NAME;
        FOR EACH ROW
        BEGIN
            DELETE FROM &EVENT_CS_ASSIGN_TABLE_NAME;
            WHERE &EVENT_CS_ASSIGN_TABLE_NAME;.&EVENT_ID_COL; IN (SELECT OLD.rowid FROM &EVENT_TABLE_NAME;);
        END;
        </string>
    <string name="SQL_EVENT_TRIGGER_PROFILE_DELETION"
        >CREATE TRIGGER &SQL_EVENT_TRIGGER_PROFILE_DELETION;
        BEFORE DELETE ON &PROFILE_TABLE_NAME;
        FOR EACH ROW
        BEGIN
            DELETE FROM &EVENT_TABLE_NAME;
            WHERE &EVENT_TABLE_NAME;.&EVENT_REQ_USER_ID_COL; IN (SELECT OLD.rowid FROM &PROFILE_TABLE_NAME;);

            UPDATE &EVENT_TABLE_NAME;
            SET &EVENT_APPROVAL_COL; = 0
            WHERE &EVENT_TABLE_NAME;.&EVENT_AC_ID_COL; IN (SELECT OLD.rowid FROM &PROFILE_TABLE_NAME;);

            UPDATE &EVENT_TABLE_NAME;
            SET &EVENT_AC_ID_COL; = NULL
            WHERE &EVENT_TABLE_NAME;.&EVENT_AC_ID_COL; IN (SELECT OLD.rowid FROM &PROFILE_TABLE_NAME;);

            DELETE FROM &EVENT_CS_ASSIGN_TABLE_NAME;
            WHERE &EVENT_CS_ASSIGN_TABLE_NAME;.&EVENT_CS_PROFILE_ID_COL; IN (SELECT OLD.rowid FROM &PROFILE_TABLE_NAME;);
        END;
    </string>
    <string name="SQL_EVENT_TRIGGER_BECOMES_UNAPPROVED"
        >CREATE TRIGGER &SQL_EVENT_TRIGGER_BECOMES_UNAPPROVED;
        AFTER UPDATE OF &EVENT_APPROVAL_COL;, &EVENT_AC_ID_COL;  ON &EVENT_TABLE_NAME;
        FOR EACH ROW
        WHEN (NEW.&EVENT_AC_ID_COL; IS NULL) OR (NEW.&EVENT_APPROVAL_COL; != 1)
        BEGIN
            DELETE FROM &EVENT_CS_ASSIGN_TABLE_NAME;
            WHERE &EVENT_CS_ASSIGN_TABLE_NAME;.&EVENT_ID_COL; IN (SELECT OLD.rowid FROM &EVENT_TABLE_NAME;);

            UPDATE &EVENT_TABLE_NAME;
            SET &EVENT_AC_ID_COL; = NULL
            WHERE &EVENT_TABLE_NAME;.rowid IN (SELECT OLD.rowid FROM &EVENT_TABLE_NAME; WHERE NEW.&EVENT_APPROVAL_COL; != 1);

            UPDATE &EVENT_TABLE_NAME;
            SET &EVENT_APPROVAL_COL; = 0
            WHERE &EVENT_TABLE_NAME;.rowid IN (SELECT OLD.rowid FROM &EVENT_TABLE_NAME; WHERE NEW.&EVENT_AC_ID_COL; IS NULL);
        END
    </string>
    <string name="SQL_EVENT_TRIGGER_BECOMES_APPROVED"
        >CREATE TRIGGER &SQL_EVENT_TRIGGER_BECOMES_APPROVED;
        AFTER UPDATE OF &EVENT_AC_ID_COL;  ON &EVENT_TABLE_NAME;
        FOR EACH ROW
        WHEN (NEW.&EVENT_AC_ID_COL; != NULL)
        BEGIN
            UPDATE &EVENT_TABLE_NAME;
            SET &EVENT_APPROVAL_COL; = 1
            WHERE &EVENT_TABLE_NAME;.rowid IN (SELECT OLD.rowid FROM &EVENT_TABLE_NAME; WHERE NEW.&EVENT_AC_ID_COL; IS NOT NULL);
        END
    </string>
    <string name="SQL_EVENT_TRIGGER_PROFILE_USERNAME_CHANGE"
        >CREATE TRIGGER &SQL_EVENT_TRIGGER_USERNAME_CHANGE;
        AFTER UPDATE OF &PROFILE_USERNAME_COL; ON &PROFILE_TABLE_NAME;
        FOR EACH ROW
        BEGIN
            UPDATE &EVENT_TABLE_NAME;
            SET &EVENT_REQ_USER_COL; = NEW.&PROFILE_USERNAME_COL;
            WHERE &EVENT_TABLE_NAME;.&EVENT_REQ_USER_ID_COL; IN (SELECT OLD._ID FROM &PROFILE_TABLE_NAME;);
        END;
    </string>
</resources>